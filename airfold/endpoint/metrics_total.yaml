description: |
  Get total metrics for a specific `start_time` to `end_time` period.
  Default time range: 1 DAY from now.
  Specific `model` or `group_id` can be also specified to get filtered data.
nodes:
  - intervals:
      # language=clickhouse
      sql: |-
        WITH
          {% if start_time is defined %}
            toStartOfFiveMinutes({{ start_time }}:: DateTime)
          {% else %}
            toStartOfFiveMinutes(now() - INTERVAL 1 DAY)
          {% endif %}
        AS start,
          {% if end_time is defined %}
            toStartOfFiveMinutes({{ end_time }}:: DateTime)
          {% else %}
            toStartOfFiveMinutes(now() + INTERVAL 5 MINUTES)
          {% endif %}
        AS end
        SELECT arrayJoin(arrayMap(x -> toDateTime(x), range(toUInt32(start), toUInt32(end), 300))) as ts
  - endpoint:
      # language=clickhouse
      sql: |-
        SELECT i.ts,
               countMerge(a.request_count)                                       AS request_count,
               quantileMerge(0.5)(a.generation_time_p50)                         AS generation_time_p50,
               quantileMerge(0.95)(a.generation_time_p95)                        AS generation_time_p95,
               sumMerge(a.total_prompt_tokens)                                   AS total_prompt_tokens,
               sumMerge(a.total_completion_tokens)                               AS total_completion_tokens,
               quantileMerge(0.5)(a.tokens_per_sec_p50)                          AS tokens_per_sec_p50,
               quantileMerge(0.95)(a.tokens_per_sec_p95)                         AS tokens_per_sec_p95,
               sumMerge(a.total_cost_prompt) + sumMerge(a.total_cost_completion) AS total_cost
        FROM intervals i
                 LEFT JOIN aggregate_1min a ON (
            toStartOfFiveMinutes(a.start) = i.ts
                AND
                {% if start_time is defined %}
                a.start >= toStartOfMinute({{ start_time }}:: DateTime)
                {% else %}
                a.start >= now() - INTERVAL 1 DAY
                {% endif %}
                AND
                {% if end_time is defined %}
                a.end <= toStartOfMinute({{ end_time }}:: DateTime)
                {% else %}
                a.end <= now()
                {% endif %}
                {% if groups is defined %}
                    AND group_id IN (splitByChar(',', {{ groups }}))
                {% elif models is defined %}
                    AND model IN (splitByChar(',', {{ models }}))
                {% endif %}
            )
        GROUP BY ts
  - coalesce:
      # language=clickhouse
      sql: |
        SELECT ts,
               request_count,
               if(isNaN(generation_time_p50), 0, generation_time_p50) AS generation_time_p50,
               if(isNaN(generation_time_p95), 0, generation_time_p95) AS generation_time_p95,
               total_prompt_tokens,
               total_completion_tokens,
               if(isNaN(tokens_per_sec_p50), 0, tokens_per_sec_p50)   AS tokens_per_sec_p50,
               if(isNaN(tokens_per_sec_p95), 0, tokens_per_sec_p95)   AS tokens_per_sec_p95,
               total_cost
        FROM endpoint
        ORDER by ts
params:
  - name: start_time
    type: datetime
  - name: end_time
    type: datetime
  - name: groups
    type: string
  - name: models
    type: string
publish: metrics_total
